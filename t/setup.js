// Generated by CoffeeScript 2.7.0
(function() {
  // Test setup and utilities (CommonJS)
  var mock;

  ({mock} = require('node:test'));

  // Helper to add mockResolvedValue to mock functions
  exports.createMockFn = function(name = 'mockFn') {
    var fn;
    fn = mock.fn();
    // Add helper methods that mimic Vitest/Jest
    fn.mockResolvedValue = function(value) {
      fn.mock.mockImplementation(function() {
        return Promise.resolve(value);
      });
      return fn;
    };
    fn.mockRejectedValue = function(error) {
      fn.mock.mockImplementation(function() {
        return Promise.reject(error);
      });
      return fn;
    };
    fn.mockReturnValue = function(value) {
      fn.mock.mockImplementation(function() {
        return value;
      });
      return fn;
    };
    fn.mockImplementation = function(impl) {
      fn.mock.mockImplementation(impl);
      return fn;
    };
    fn.mockReset = function() {
      fn.mock.resetCalls();
      return fn;
    };
    return fn;
  };

  // Create mock Ollama response
  exports.createMockOllamaResponse = function(content) {
    return {
      data: {
        response: content,
        model: 'test-model',
        created_at: new Date().toISOString(),
        done: true
      }
    };
  };

  // Create mock Neo4j driver
  exports.createMockNeo4jDriver = function() {
    var driver, mockSession, sessions;
    sessions = [];
    mockSession = {
      run: mock.fn(),
      close: mock.fn()
    };
    // Set up default resolved values
    mockSession.run.mock.mockImplementation(function() {
      return Promise.resolve({
        records: [],
        summary: {
          counters: {},
          resultAvailableAfter: 1,
          resultConsumedAfter: 2
        }
      });
    });
    mockSession.close.mock.mockImplementation(function() {
      return Promise.resolve(void 0);
    });
    driver = {
      session: mock.fn(),
      close: mock.fn(),
      getSessions: function() {
        return sessions;
      }
    };
    driver.session.mock.mockImplementation(function() {
      sessions.push(mockSession);
      return mockSession;
    });
    return driver;
  };

  // Create mock Neo4j tool
  exports.createMockNeo4jTool = function() {
    var tool;
    tool = {
      connect: mock.fn(),
      executeQuery: mock.fn(),
      naturalLanguageQuery: mock.fn(),
      addKnowledge: mock.fn(),
      generateSchema: mock.fn(),
      getStats: mock.fn()
    };
    // Set default implementations
    tool.connect.mock.mockImplementation(function() {
      return Promise.resolve(true);
    });
    tool.executeQuery.mock.mockImplementation(function() {
      return Promise.resolve({
        records: [],
        summary: {}
      });
    });
    tool.naturalLanguageQuery.mock.mockImplementation(function() {
      return Promise.resolve({
        records: []
      });
    });
    tool.addKnowledge.mock.mockImplementation(function() {
      return Promise.resolve(void 0);
    });
    tool.generateSchema.mock.mockImplementation(function() {
      return Promise.resolve({
        nodeTypes: [],
        relationshipTypes: []
      });
    });
    tool.getStats.mock.mockImplementation(function() {
      return Promise.resolve({
        totalNodes: 0,
        totalRelationships: 0,
        nodeTypes: {}
      });
    });
    return tool;
  };

  // Create mock Axios
  exports.createMockAxios = function() {
    var axios;
    axios = {
      post: mock.fn(),
      get: mock.fn(),
      _reset: function() {
        this.post.mock.resetCalls();
        return this.get.mock.resetCalls();
      }
    };
    return axios;
  };

  // Wait for promises
  exports.waitForPromises = function(timeout = 100) {
    return new Promise(function(resolve) {
      return setTimeout(resolve, timeout);
    });
  };

  // Test configuration
  exports.createTestConfig = function(overrides = {}) {
    return {
      alpha: {
        model: 'test-alpha',
        role: 'analytical',
        personality: 'test-analytical',
        system_prompt: 'Test alpha prompt',
        temperature: 0.3,
        max_tokens: 100,
        top_p: 0.9,
        ...(overrides.alpha || {})
      },
      beta: {
        model: 'test-beta',
        role: 'creative',
        personality: 'test-creative',
        system_prompt: 'Test beta prompt',
        temperature: 0.7,
        max_tokens: 100,
        top_p: 0.95,
        ...(overrides.beta || {})
      },
      corpus_callosum: {
        default_mode: 'parallel',
        communication_timeout: 1000,
        max_iterations: 3,
        synthesis_threshold: 0.8,
        timeout: 1000,
        modes: {
          parallel: {
            timeout: 500
          },
          sequential: {
            default_order: ['alpha', 'beta'],
            handoff_delay: 100
          },
          debate: {
            max_rounds: 2,
            convergence_threshold: 0.9
          },
          synthesis: {
            synthesis_model: 'alpha',
            show_individual: false
          },
          handoff: {
            trigger_phrases: ['hand this over']
          }
        },
        ...(overrides.corpus_callosum || {})
      }
    };
  };

}).call(this);
